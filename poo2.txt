/*
poo2

Cerințe comune: 

--> Toate clasele vor conține obligatoriu constructori de 
inițializare, parametrizați și de copiere; 
destructor; operatorii „=”, „>>”, „<<”
supraîncărcați corespunzător, moșteniri & encapsulare  

--> Clasele derivate trebuie sa contina constructori parametrizati 
(prin care sa se evidentieze transmiterea parametrilor catre 
constructorul din clasa de baza) si destructori. 

--> În fiecare proiect vor fi ilustrate conceptele de upcasting, 
downcasting, funcții virtuale (pure – unde se consideră mai natural)

-->Utilizarea de variabile și de funcții statice

-->Tratarea exceptiilor (try – catch) 

-->Citirea informațiilor complete a n obiecte (de diferite tipuri), 
memorarea și afișarea acestora

--> Meniu interactiv 

--> Rezolvarea corectă a cerințelor suplimentare corespunzatoare 
fiecarei teme 


Tema 4.
Se dau urmatoarele clase: 

- Clasa Persoana(int id,  string nume) 

- Clasa Abonat:Persoana(string nr_telefon) 

- Clasa Abonat_Skype: Abonat (string id_skype) 

- Clasa Abonat_Skype_Romania (string adresa_mail) : Abonat_Skype 

- Clasa Abonat_Skype_Extern(string tara) : Abonat_Skype 

Sa se construiasca clasa Agenda ce contina o lista de abonati si 
sa se supraincarce operatorul [ ](indexare)care returneaza 
abonatul cu numele precizat.

*/


#include<iostream>
#include<vector>

using namespace std;

class Persoana
{
    int id;
    string nume;
public:
    Persoana(){};
    Persoana(int id, string nume){cout<<"da1";};
    Persoana(const Persoana&);
    Persoana& operator=(Persoana&);
    virtual void citire();
    void set_id(int);
    void set_nume(string);
};

void Persoana::set_id(int ID){id=ID;}
void Persoana::set_nume(string s){nume=s;}

void Persoana::citire()
{
    cin>>id>>nume;
    cout<<"aici"<<endl;
}

/*Persoana::Persoana(const Persoana& P)
{   cout<<"merge";
    id=P.id;
    nume=P.nume;
    cout<<id<<' '<<nume;
}

Persoana& Persoana::operator=(Persoana& P)
{
    cout<<"da"<<endl;
        nume=P.nume;
        id=P.id;
        cout<<*nume<<' '<<*id<<endl;
}*/

class Abonat: public Persoana
{
    string nr_telefon;
public:
    Abonat(){};
    Abonat(int id, string nume, string nr_telefon):Persoana(id, nume){cout<<"da2";};
    void citire(){Persoana::citire();
                 cin>>nr_telefon;
                 cout<<"ok";}
    void set_nr(string);
};

void Abonat::set_nr(string s){nr_telefon=s;}

class Abonat_Skype:public Abonat
{
    string id_skype;
public:
    Abonat_Skype(){};
    Abonat_Skype(int id, string nume, string nr_telefon, string id_skype):Abonat(id, nume, nr_telefon){cout<<"da3";}
    void citire(){Abonat::citire();
                cin>>id_skype;
                cout<<"bine";};
    void set_id_s(string);
};

void Abonat_Skype::set_id_s(string s){id_skype=s;}

class Abonat_Skype_Romania: public Abonat_Skype
{
    string adresa_mail;
public:
    Abonat_Skype_Romania(){};
    Abonat_Skype_Romania(int id, string nume, string nr_telefon, string id_skype, string adresa_mail):Abonat_Skype(id, nume, nr_telefon, id_skype){};
    void citire(){Abonat_Skype::citire();
                  cin>>adresa_mail;}
    void set_adresa(string);
};

void Abonat_Skype_Romania::set_adresa(string s){adresa_mail=s;}

class Abonat_Skype_Extern: public Abonat_Skype
{
    string tara;
public:
    Abonat_Skype_Extern(){};
    Abonat_Skype_Extern(int id, string nume, string nr_telefon, string id_skype, string tara):Abonat_Skype(id, nume, nr_telefon, id_skype){};
    void citire(){Abonat_Skype::citire();
                  cin>>tara;}

    void set_tara(string);
};

void Abonat_Skype_Extern::set_tara(string s){tara=s;}

class Agenda:public Abonat
{
    int nr_abonati;
    vector<Abonat*> v;
public:
    Agenda(){};
};

int main()
{
    ///Abonat a(1,"mihai","09");
    ///Abonat_Skype as(1,"mihai","089","id");
    Abonat_Skype as;
    as.citire();
}



--2
#include<iostream>
#include<vector>

using namespace std;

class Persoana
{
    int id;
    string nume;
public:
    Persoana(){};
    Persoana(int i, string n)
    {
        id=i;
        nume=n;
    };
    Persoana(const Persoana&);
    Persoana& operator=(Persoana&);
    friend istream& operator>>(istream&, Persoana&);
    friend ostream& operator<<(ostream&, Persoana&);
    virtual void citire();
    virtual void afisare();
    void set_id(int);
    void set_nume(string);
    int get_id();
    string get_nume();
};

int Persoana::get_id(){return id;}
string Persoana::get_nume(){return nume;}

istream& operator>>(istream& in, Persoana& P)
{
    in>>P.id>>P.nume;
    return in;
}

ostream& operator<<(ostream& out, Persoana& P)
{
    out<<P.id<<' '<<P.nume<<endl;
    return out;
}

void Persoana::afisare(){cout<<id<<' '<<nume<<endl;}
void Persoana::set_id(int ID){id=ID;}
void Persoana::set_nume(string s){nume=s;}

void Persoana::citire()
{    cout<<"Furnizati id-ul: ";
    cin>>id;
    cout<<"Furnizati numele: ";
    cin>>nume;
}

Persoana::Persoana(const Persoana& P)
{   cout<<"merge"<<endl;
    id=P.id;
    nume=P.nume;
    cout<<id<<' '<<nume;
}

Persoana& Persoana::operator=(Persoana& P)
{
    cout<<"da"<<endl;
    if(this!=&P)
        {nume=P.nume;
        id=P.id;
        cout<<nume<<' '<<id<<' ';}
    return *this;
}

class Abonat: public Persoana
{
    string nr_telefon;
public:
    Abonat(){};
    Abonat(int i, string num, string nr):Persoana(i, num){nr_telefon=nr;};
    Abonat(const Abonat&);
    Abonat& operator=(Abonat&);
    friend istream& operator>>(istream&, Abonat&);
    friend ostream& operator<<(ostream&, Abonat&);
    void citire(){Persoana::citire();
                  cout<<"Furnizati numarul de telefon: ";
                 cin>>nr_telefon;
                 }
    void afisare(){Persoana::afisare();
                   cout<<nr_telefon<<endl;}
    void set_nr(string);
    string get_nr();
};



istream& operator>>(istream& in, Abonat& A)
{
    in>>dynamic_cast<Persoana&>(A);
    in>>A.nr_telefon;
    return in;
}

ostream& operator<<(ostream& out, Abonat& A)
{
    out<<dynamic_cast<Persoana&>(A);
    out<<A.nr_telefon<<' ';
    return out;
}

Abonat& Abonat::operator=(Abonat& a)
{
    if(this!=&a)
    {
        this->Persoana::operator=(a);
        nr_telefon=a.nr_telefon;
    }
    return *this;
}

Abonat::Abonat(const Abonat& A):Persoana(A)
{
    nr_telefon=A.nr_telefon;
}

/*void Abonat::set_nr(string s){Persoana::set_id;
                              Persoana::set_nume;
                              nr_telefon=s;}*/

class Abonat_Skype:public Abonat
{
    string id_skype;
public:
    Abonat_Skype(){};
    Abonat_Skype(int i, string num, string nr, string id):Abonat(i, num, nr)
    {id_skype=id;}
    Abonat_Skype(const Abonat_Skype&);
    Abonat_Skype& operator=(Abonat_Skype&);
    friend istream& operator>>(istream&, Abonat_Skype&);
    friend ostream& operator<<(ostream&, Abonat_Skype&);
    void citire(){Abonat::citire();
                  cout<<"Furnizati skype id-ul: ";
                   cin>>id_skype;
                }
    void afisare(){Abonat::afisare();
                    cout<<id_skype<<endl;}
    void set_id_s(string);
};

istream& operator>>(istream& in, Abonat_Skype& AS)
{
    in>>dynamic_cast<Abonat&>(AS);
    in>>AS.id_skype;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype& AS)
{
    out<<dynamic_cast<Abonat&>(AS);
    out<<AS.id_skype<<' ';
    return out;
}

Abonat_Skype& Abonat_Skype::operator=(Abonat_Skype& AS)
{
    if(this!=&AS)
    {
        this->Abonat::operator=(AS);
        id_skype=AS.id_skype;
    }
    return *this;
}

Abonat_Skype::Abonat_Skype(const Abonat_Skype& AS):Abonat(AS)
{
    id_skype=AS.id_skype;
}

/*void Abonat_Skype::set_id_s(string s){Abonat::set_nr;
                                      id_skype=s;}*/

class Abonat_Skype_Romania: public Abonat_Skype
{
    string adresa_mail;
public:
    Abonat_Skype_Romania(){};
    Abonat_Skype_Romania(int i, string num, string nr, string id, string adresa):Abonat_Skype(i, num, nr, id)
    {adresa_mail=adresa;};
    Abonat_Skype_Romania(const Abonat_Skype_Romania&);
    friend istream& operator>>(istream&, Abonat_Skype_Romania&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Romania&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati adresa de mail: ";
                  cin>>adresa_mail;}
    void afisare(){Abonat_Skype::afisare();
                  cout<<adresa_mail<<endl;}
    void set_adresa(string);
};

istream& operator>>(istream& in, Abonat_Skype_Romania& ASR)
{
    in>>dynamic_cast<Abonat_Skype&>(ASR);
    in>>ASR.adresa_mail;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Romania& ASR)
{
    out<<dynamic_cast<Abonat_Skype&>(ASR);
    out<<ASR.adresa_mail<<' ';
    return out;
}

Abonat_Skype_Romania::Abonat_Skype_Romania(const Abonat_Skype_Romania& ASR):Abonat_Skype(ASR)
{
    adresa_mail=ASR.adresa_mail;
}

/*void Abonat_Skype_Romania::set_adresa(string s){Abonat_Skype::set_id_s;
                                                adresa_mail=s;}*/

class Abonat_Skype_Extern: public Abonat_Skype
{
    string tara;
public:
    Abonat_Skype_Extern(){};
    Abonat_Skype_Extern(int i, string num, string nr, string id, string s):Abonat_Skype(i, num, nr, id)
    {tara=s;};
    Abonat_Skype_Extern(const Abonat_Skype_Extern&);
    Abonat_Skype_Extern& operator=(Abonat_Skype_Extern&);
    friend istream& operator>>(istream&, Abonat_Skype_Extern&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Extern&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati tara de apartanenta a abonatului: ";
                  cin>>tara;}
    void afisare(){Abonat_Skype::afisare();
                   cout<<tara<<endl;}
    void set_tara(string);
};

istream& operator>>(istream& in, Abonat_Skype_Extern& ASE)
{
    in>>dynamic_cast<Abonat_Skype&>(ASE);
    in>>ASE.tara;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Extern& ASE)
{
    out<<dynamic_cast<Abonat_Skype&>(ASE);
    out<<ASE.tara<<' ';
    return out;
}

Abonat_Skype_Extern& Abonat_Skype_Extern::operator=(Abonat_Skype_Extern& ASE)
{
    if(this!=&ASE)
    {
        this->Abonat_Skype::operator=(ASE);
        tara=ASE.tara;
    }
    return *this;

}

Abonat_Skype_Extern::Abonat_Skype_Extern(const Abonat_Skype_Extern& ASE):Abonat_Skype(ASE)
{
    tara=ASE.tara;
}

/*void Abonat_Skype_Extern::set_tara(string s){Abonat_Skype::set_id_s;
                                             tara=s;}*/

class Agenda:public Abonat
{
    int nr_abonati;
    vector<Abonat*> v;
public:
    Agenda(){};
    void creare_lista();
};

void Agenda::creare_lista()
{   cin>>nr_abonati;
  for(int i=1;i<=nr_abonati;i++)
    {cout<<"Selectati tipul de persoana de adaugat in Agenda."<<endl;
    cout<<"1-Abonat 2-Abonat Skype 3- Abonat Skype din Romania 4-Abonat Skype din strainatate"<<endl;
    int op;
    cin>>op;
    switch(op)
    {
        case 1: {Abonat A;
                 A.citire();
                 v.push_back(&A);
                 break;
                 }
        case 2: {Abonat_Skype AS;
                 AS.citire();
                 v.push_back(&AS);
                 break;
                 }
        case 3: {Abonat_Skype_Romania ASR;
                 ASR.citire();
                 v.push_back(&ASR);
                 break;
                 }
        case 4: {Abonat_Skype_Extern ASE;
                 ASE.citire();
                 v.push_back(&ASE);
                 break;
                 }
    }
    cout<<endl;
    }
}

int main()
{
  Agenda a;
  a.creare_lista();

}

--3
#include<iostream>
#include<vector>
#include<typeinfo>

using namespace std;

class Persoana
{
    int id;
    string nume;
public:
    Persoana(){};
    Persoana(int i, string n)
    {
        id=i;
        nume=n;
    };
    Persoana(const Persoana&);
    Persoana& operator=(Persoana&);
    friend istream& operator>>(istream&, Persoana&);
    friend ostream& operator<<(ostream&, Persoana&);
    virtual void citire();
    virtual void afisare();
    void set_id(int);
    void set_nume(string);
    int get_id();
    string get_nume();
};

int Persoana::get_id(){return id;}
string Persoana::get_nume(){return nume;}

istream& operator>>(istream& in, Persoana& P)
{
    in>>P.id>>P.nume;
    return in;
}

ostream& operator<<(ostream& out, Persoana& P)
{
    out<<P.id<<' '<<P.nume<<endl;
    return out;
}

void Persoana::afisare(){cout<<id<<' '<<nume<<endl;}
void Persoana::set_id(int ID){id=ID;}
void Persoana::set_nume(string s){nume=s;}

void Persoana::citire()
{    cout<<"Furnizati id-ul: ";
    cin>>id;
    cout<<"Furnizati numele: ";
    cin>>nume;
}

Persoana::Persoana(const Persoana& P)
{   cout<<"merge"<<endl;
    id=P.id;
    nume=P.nume;
    cout<<id<<' '<<nume;
}

Persoana& Persoana::operator=(Persoana& P)
{
    cout<<"da"<<endl;
    if(this!=&P)
        {nume=P.nume;
        id=P.id;
        cout<<nume<<' '<<id<<' ';}
    return *this;
}

class Abonat: public Persoana
{
    string nr_telefon;
public:
    Abonat(){};
    Abonat(int i, string num, string nr):Persoana(i, num){nr_telefon=nr;};
    Abonat(const Abonat&);
    Abonat& operator=(Abonat&);
    friend istream& operator>>(istream&, Abonat&);
    friend ostream& operator<<(ostream&, Abonat&);
    void citire(){Persoana::citire();
                  cout<<"Furnizati numarul de telefon: ";
                 cin>>nr_telefon;
                 }
    void afisare(){Persoana::afisare();
                   cout<<nr_telefon<<endl;}
    void set_nr(string);
    string get_nr();
};



istream& operator>>(istream& in, Abonat& A)
{
    in>>dynamic_cast<Persoana&>(A);
    in>>A.nr_telefon;
    return in;
}

ostream& operator<<(ostream& out, Abonat& A)
{
    out<<dynamic_cast<Persoana&>(A);
    out<<A.nr_telefon<<' ';
    return out;
}

Abonat& Abonat::operator=(Abonat& a)
{
    if(this!=&a)
    {
        this->Persoana::operator=(a);
        nr_telefon=a.nr_telefon;
    }
    return *this;
}

Abonat::Abonat(const Abonat& A):Persoana(A)
{
    nr_telefon=A.nr_telefon;
}

/*void Abonat::set_nr(string s){Persoana::set_id;
                              Persoana::set_nume;
                              nr_telefon=s;}*/

class Abonat_Skype:public Abonat
{
    string id_skype;
public:
    Abonat_Skype(){};
    Abonat_Skype(int i, string num, string nr, string id):Abonat(i, num, nr)
    {id_skype=id;}
    Abonat_Skype(const Abonat_Skype&);
    Abonat_Skype& operator=(Abonat_Skype&);
    friend istream& operator>>(istream&, Abonat_Skype&);
    friend ostream& operator<<(ostream&, Abonat_Skype&);
    void citire(){Abonat::citire();
                  cout<<"Furnizati skype id-ul: ";
                   cin>>id_skype;
                }
    void afisare(){Abonat::afisare();
                    cout<<id_skype<<endl;}
    void set_id_s(string);
};

istream& operator>>(istream& in, Abonat_Skype& AS)
{
    in>>dynamic_cast<Abonat&>(AS);
    in>>AS.id_skype;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype& AS)
{
    out<<dynamic_cast<Abonat&>(AS);
    out<<AS.id_skype<<' ';
    return out;
}

Abonat_Skype& Abonat_Skype::operator=(Abonat_Skype& AS)
{
    if(this!=&AS)
    {
        this->Abonat::operator=(AS);
        id_skype=AS.id_skype;
    }
    return *this;
}

Abonat_Skype::Abonat_Skype(const Abonat_Skype& AS):Abonat(AS)
{
    id_skype=AS.id_skype;
}

/*void Abonat_Skype::set_id_s(string s){Abonat::set_nr;
                                      id_skype=s;}*/

class Abonat_Skype_Romania: public Abonat_Skype
{
    string adresa_mail;
public:
    Abonat_Skype_Romania(){};
    Abonat_Skype_Romania(int i, string num, string nr, string id, string adresa):Abonat_Skype(i, num, nr, id)
    {adresa_mail=adresa;};
    Abonat_Skype_Romania(const Abonat_Skype_Romania&);
    friend istream& operator>>(istream&, Abonat_Skype_Romania&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Romania&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati adresa de mail: ";
                  cin>>adresa_mail;}
    void afisare(){Abonat_Skype::afisare();
                  cout<<adresa_mail<<endl;}
    void set_adresa(string);
};

istream& operator>>(istream& in, Abonat_Skype_Romania& ASR)
{
    in>>dynamic_cast<Abonat_Skype&>(ASR);
    in>>ASR.adresa_mail;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Romania& ASR)
{
    out<<dynamic_cast<Abonat_Skype&>(ASR);
    out<<ASR.adresa_mail<<' ';
    return out;
}

Abonat_Skype_Romania::Abonat_Skype_Romania(const Abonat_Skype_Romania& ASR):Abonat_Skype(ASR)
{
    adresa_mail=ASR.adresa_mail;
}

/*void Abonat_Skype_Romania::set_adresa(string s){Abonat_Skype::set_id_s;
                                                adresa_mail=s;}*/

class Abonat_Skype_Extern: public Abonat_Skype
{
    string tara;
public:
    Abonat_Skype_Extern(){};
    Abonat_Skype_Extern(int i, string num, string nr, string id, string s):Abonat_Skype(i, num, nr, id)
    {tara=s;};
    Abonat_Skype_Extern(const Abonat_Skype_Extern&);
    Abonat_Skype_Extern& operator=(Abonat_Skype_Extern&);
    friend istream& operator>>(istream&, Abonat_Skype_Extern&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Extern&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati tara de apartanenta a abonatului: ";
                  cin>>tara;}
    void afisare(){Abonat_Skype::afisare();
                   cout<<tara<<endl;}
    void set_tara(string);
};

istream& operator>>(istream& in, Abonat_Skype_Extern& ASE)
{
    in>>dynamic_cast<Abonat_Skype&>(ASE);
    in>>ASE.tara;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Extern& ASE)
{
    out<<dynamic_cast<Abonat_Skype&>(ASE);
    out<<ASE.tara<<' ';
    return out;
}

Abonat_Skype_Extern& Abonat_Skype_Extern::operator=(Abonat_Skype_Extern& ASE)
{
    if(this!=&ASE)
    {
        this->Abonat_Skype::operator=(ASE);
        tara=ASE.tara;
    }
    return *this;

}

Abonat_Skype_Extern::Abonat_Skype_Extern(const Abonat_Skype_Extern& ASE):Abonat_Skype(ASE)
{
    tara=ASE.tara;
}

/*void Abonat_Skype_Extern::set_tara(string s){Abonat_Skype::set_id_s;
                                             tara=s;}*/

class Agenda:public Abonat
{
    int nr_abonati;
    vector<Abonat*> v;
public:
    Agenda(){};
    void creare_lista();
};

void Agenda::creare_lista()
{   cin>>nr_abonati;
  for(int i=1;i<=nr_abonati;i++)
    {cout<<"Selectati tipul de persoana de adaugat in Agenda."<<endl;
    cout<<"1-Abonat 2-Abonat Skype 3- Abonat Skype din Romania 4-Abonat Skype din strainatate"<<endl;
    int op;
    cin>>op;
    switch(op)
    {
        case 1: {Abonat *A = new Abonat();
                 A->citire();
                 v.push_back(A);
                 break;
                 }
        case 2: {Abonat_Skype *AS = new Abonat_Skype();
                 (*AS).citire();
                 v.push_back(AS);
                 break;
                 }
        case 3: {Abonat_Skype_Romania *ASR = new Abonat_Skype_Romania();
                 ASR->citire();
                 v.push_back(ASR);
                 break;
                 }
        case 4: {Abonat_Skype_Extern *ASE = new Abonat_Skype_Extern();
                 ASE->citire();
                 v.push_back(ASE);
                 break;
                 }
    }

    }
    cout<<endl;
    vector<Abonat*>::iterator p;
    for(p=v.begin();p!=v.end();p++)
        if(typeid(*p)==typeid(Abonat*)) (**p).afisare();
}

int main()
{
  Agenda a;
  a.creare_lista();

}


--4

#include<iostream>
#include<vector>
#include<typeinfo>

using namespace std;

class Persoana
{
protected:
    int id;
    string nume;
public:
    Persoana(){};
    Persoana(int i, string n)
    {
        id=i;
        nume=n;
    };
    Persoana(const Persoana&);
    Persoana& operator=(Persoana&);
    friend istream& operator>>(istream&, Persoana&);
    friend ostream& operator<<(ostream&, Persoana&);
    virtual void citire();
    virtual void afisare();
};


istream& operator>>(istream& in, Persoana& P)
{
    in>>P.id>>P.nume;
    return in;
}

ostream& operator<<(ostream& out, Persoana& P)
{
    out<<P.id<<' '<<P.nume<<endl;
    return out;
}

void Persoana::afisare(){cout<<"Id-ul: "<<id<<endl;
                         cout<<"Numele: "<<nume<<endl;}


void Persoana::citire()
{    cout<<"Furnizati id-ul: ";
try{
    cin>>id;
    if(id<0) throw 1;
}
catch(int x){cout<<"Id invalid. Reincercati."<<endl;
exit(EXIT_FAILURE);}
    cout<<"Furnizati numele: ";
    cin>>nume;
}

Persoana::Persoana(const Persoana& P)
{   cout<<"merge"<<endl;
    id=P.id;
    nume=P.nume;
    cout<<id<<' '<<nume;
}

Persoana& Persoana::operator=(Persoana& P)
{
    cout<<"da"<<endl;
    if(this!=&P)
        {nume=P.nume;
        id=P.id;
        cout<<nume<<' '<<id<<' ';}
    return *this;
}

class Abonat: public Persoana
{
protected:
    string nr_telefon;
public:
    Abonat(){};
    Abonat(int i, string num, string nr):Persoana(i, num){nr_telefon=nr;};
    Abonat(const Abonat&);
    Abonat& operator=(Abonat&);
    friend istream& operator>>(istream&, Abonat&);
    friend ostream& operator<<(ostream&, Abonat&);
    void citire(){Persoana::citire();
                  cout<<"Furnizati numarul de telefon: ";
                 cin>>nr_telefon;
                 }
    void afisare(){Persoana::afisare();
                   cout<<"Numarul de telefon: "<<nr_telefon<<endl;}
};



istream& operator>>(istream& in, Abonat& A)
{
    in>>dynamic_cast<Persoana&>(A);
    in>>A.nr_telefon;
    return in;
}

ostream& operator<<(ostream& out, Abonat& A)
{
    out<<dynamic_cast<Persoana&>(A);
    out<<A.nr_telefon<<' ';
    return out;
}

Abonat& Abonat::operator=(Abonat& a)
{
    if(this!=&a)
    {
        this->Persoana::operator=(a);
        nr_telefon=a.nr_telefon;
    }
    return *this;
}

Abonat::Abonat(const Abonat& A):Persoana(A)
{
    nr_telefon=A.nr_telefon;
}


class Abonat_Skype:public Abonat
{
    string id_skype;
public:
    Abonat_Skype(){};
    Abonat_Skype(int i, string num, string nr, string id):Abonat(i, num, nr)
    {id_skype=id;}
    Abonat_Skype(const Abonat_Skype&);
    Abonat_Skype& operator=(Abonat_Skype&);
    friend istream& operator>>(istream&, Abonat_Skype&);
    friend ostream& operator<<(ostream&, Abonat_Skype&);
    void citire(){Abonat::citire();
                  cout<<"Furnizati skype id-ul: ";
                   cin>>id_skype;
                }
    void afisare(){Abonat::afisare();
                    cout<<"Skype id-ul: "<<id_skype<<endl;}
};

istream& operator>>(istream& in, Abonat_Skype& AS)
{
    in>>dynamic_cast<Abonat&>(AS);
    in>>AS.id_skype;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype& AS)
{
    out<<dynamic_cast<Abonat&>(AS);
    out<<AS.id_skype<<' ';
    return out;
}

Abonat_Skype& Abonat_Skype::operator=(Abonat_Skype& AS)
{
    if(this!=&AS)
    {
        this->Abonat::operator=(AS);
        id_skype=AS.id_skype;
    }
    return *this;
}

Abonat_Skype::Abonat_Skype(const Abonat_Skype& AS):Abonat(AS)
{
    id_skype=AS.id_skype;
}


class Abonat_Skype_Romania: public Abonat_Skype
{
    string adresa_mail;
public:
    Abonat_Skype_Romania(){};
    Abonat_Skype_Romania(int i, string num, string nr, string id, string adresa):Abonat_Skype(i, num, nr, id)
    {adresa_mail=adresa;};
    Abonat_Skype_Romania(const Abonat_Skype_Romania&);
    friend istream& operator>>(istream&, Abonat_Skype_Romania&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Romania&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati adresa de mail: ";
                  cin>>adresa_mail;}
    void afisare(){Abonat_Skype::afisare();
                  cout<<"Adresa de mail: "<<adresa_mail<<endl;}
};

istream& operator>>(istream& in, Abonat_Skype_Romania& ASR)
{
    in>>dynamic_cast<Abonat_Skype&>(ASR);
    in>>ASR.adresa_mail;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Romania& ASR)
{
    out<<dynamic_cast<Abonat_Skype&>(ASR);
    out<<ASR.adresa_mail<<' ';
    return out;
}

Abonat_Skype_Romania::Abonat_Skype_Romania(const Abonat_Skype_Romania& ASR):Abonat_Skype(ASR)
{
    adresa_mail=ASR.adresa_mail;
}

/*void Abonat_Skype_Romania::set_adresa(string s){Abonat_Skype::set_id_s;
                                                adresa_mail=s;}*/

class Abonat_Skype_Extern: public Abonat_Skype
{
    string tara;
public:
    Abonat_Skype_Extern(){};
    Abonat_Skype_Extern(int i, string num, string nr, string id, string s):Abonat_Skype(i, num, nr, id)
    {tara=s;};
    Abonat_Skype_Extern(const Abonat_Skype_Extern&);
    Abonat_Skype_Extern& operator=(Abonat_Skype_Extern&);
    friend istream& operator>>(istream&, Abonat_Skype_Extern&);
    friend ostream& operator<<(ostream&, Abonat_Skype_Extern&);
    void citire(){Abonat_Skype::citire();
                  cout<<"Furnizati tara de apartanenta a abonatului: ";
                  cin>>tara;}
    void afisare(){Abonat_Skype::afisare();
                   cout<<"Tara: "<<tara<<endl;}
};

istream& operator>>(istream& in, Abonat_Skype_Extern& ASE)
{
    in>>dynamic_cast<Abonat_Skype&>(ASE);
    in>>ASE.tara;
    return in;
}

ostream& operator<<(ostream& out, Abonat_Skype_Extern& ASE)
{
    out<<dynamic_cast<Abonat_Skype&>(ASE);
    out<<ASE.tara<<' ';
    return out;
}

Abonat_Skype_Extern& Abonat_Skype_Extern::operator=(Abonat_Skype_Extern& ASE)
{
    if(this!=&ASE)
    {
        this->Abonat_Skype::operator=(ASE);
        tara=ASE.tara;
    }
    return *this;

}

Abonat_Skype_Extern::Abonat_Skype_Extern(const Abonat_Skype_Extern& ASE):Abonat_Skype(ASE)
{
    tara=ASE.tara;
}


class Agenda:public Abonat
{
    int nr_abonati;
    vector<Abonat*> v;
public:
    Agenda(){};
    void creare_lista();
    Agenda& operator[](Agenda&);
};

Agenda& Agenda::operator[](Agenda& A)
{
    vector<Abonat*>::iterator p;
    for(p=v.begin();p!=v.end();p++)
        if(dynamic_cast<Persoana&>(**p))
            if((**p).nume==nume) (*p).afisare();
}



void Agenda::creare_lista()
{   cin>>nr_abonati;
  for(int i=1;i<=nr_abonati;i++)
    {cout<<"Selectati tipul de persoana de adaugat in Agenda."<<endl;
    cout<<"1-Abonat 2-Abonat Skype 3- Abonat Skype din Romania 4-Abonat Skype din strainatate"<<endl;
    int op;
    cin>>op;
    switch(op)
    {
        case 1: {Abonat *A = new Abonat();
                 A->citire();
                 v.push_back(A);
                 break;
                 }
        case 2: {Abonat_Skype *AS = new Abonat_Skype();
                 (*AS).citire();
                 v.push_back(AS);
                 break;
                 }
        case 3: {Abonat_Skype_Romania *ASR = new Abonat_Skype_Romania();
                 ASR->citire();
                 v.push_back(ASR);
                 break;
                 }
        case 4: {Abonat_Skype_Extern *ASE = new Abonat_Skype_Extern();
                 ASE->citire();
                 v.push_back(ASE);
                 break;
                 }
    }

    }
    cout<<endl;
    vector<Abonat*>::iterator p;
    for(p=v.begin();p!=v.end();p++)
        if(typeid(*p)==typeid(Abonat*)) (**p).afisare();
}

int main()
{
  Agenda a;
  a.creare_lista();
  Agenda["Mihai"];

}
